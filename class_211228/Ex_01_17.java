package class_211228;

public class Ex_01_17 {

	public static void main(String[] args) {
		
		String[] language = {"C++", "C#", "JAVA"};
		
		//보통 클래스명 없이 바로 활용 가능하지만 제네릭 타입을 활용하기 때문에 클래스 명을 사용해야 함
		//클래스명 앞에 제너릭을 썼다. 
		//클래스 옆에 <T>로 가상의 자료형 명시, 만약 <T>를 붙이지 않는다면 변수 선언시에
		//T와 같은 가상의 자료형을 붙이는 것은 불가능하다. 따라서 가상의 자료형을 명시할 경우
		//클래스명 앞에 <가상자료형명>을 입력해준다.
		String last = MyArrayAlg.<String>getLast(language);
		System.out.println(last);
		

	}

}

//제너릭을 활용하는 경우 <형 안정성>
//유형이 엉뚱하게 바뀌지 않는다
//형안정싱이 확보된다 
//"<>" 사이에는 타입 파라미터가 위치한다.

//<T>, <E>, <K>, <V>로 표현한다.
//<T> 전달되는 객체가 클래스의 자료형(type)으로 사용되는 경우
//<E> 전달되는 객체가 클래스의 요소(Element)로 사용되는 경우
//<K> 전달되는 객체가 클래스의 키(key)로 사용되는 경우
//<V> 전달되는 객체가 클래스의 값(Value)로 사용되는 경우 
//<N> 숫자 (Number)